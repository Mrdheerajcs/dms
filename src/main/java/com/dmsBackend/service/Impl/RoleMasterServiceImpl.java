package com.dmsBackend.service.Impl;

import com.dmsBackend.entity.RoleMaster;
import com.dmsBackend.exception.ResourceNotFoundException;
import com.dmsBackend.payloads.Helper;
import com.dmsBackend.repository.RoleMasterRepository;
import com.dmsBackend.service.RoleMasterService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class RoleMasterServiceImpl implements RoleMasterService {

    @Autowired
    private RoleMasterRepository roleMasterRepository;

    @Override
    public RoleMaster saveRoleMaster(RoleMaster roleMaster) {
        roleMaster.setCreatedOn(Helper.getCurrentTimeStamp());
        roleMaster.setUpdatedOn(Helper.getCurrentTimeStamp());
        return roleMasterRepository.save(roleMaster);
    }

    @Override
    public RoleMaster updateRoleMaster(RoleMaster roleMaster, Integer id) {
        // Retrieve the existing RoleMaster from the database
        RoleMaster existingRoleMaster = roleMasterRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("RoleMaster not found for", "Id", id));

        // Update fields
        existingRoleMaster.setRole(roleMaster.getRole());
        existingRoleMaster.setIsActive(roleMaster.getIsActive()); // Use the getter generated by Lombok
        existingRoleMaster.setUpdatedOn(Helper.getCurrentTimeStamp());

        // Save and return the updated RoleMaster
        return roleMasterRepository.save(existingRoleMaster);
    }


    @Override
    public void deleteByIdRoleMaster(Integer id) {
        if (!roleMasterRepository.existsById(id)) {
            throw new ResourceNotFoundException("RoleMaster not found for", "Id", id);
        }
        roleMasterRepository.deleteById(id);
    }

    @Override
    public List<RoleMaster> findAllRoleMaster() {
        return roleMasterRepository.findAll();
    }

    @Override
    public Optional<RoleMaster> findRoleMasterById(Integer id) {
        return roleMasterRepository.findById(id);
    }

    public Optional<RoleMaster> findRoleByName(String name) {
        return roleMasterRepository.findByRole(name);
    }

    @Override
    public RoleMaster updateStatus(Integer id, boolean isActive) {
        RoleMaster roleMaster = roleMasterRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Role", "id", id));

        roleMaster.setIsActive(isActive);
        roleMaster.setUpdatedOn(Helper.getCurrentTimeStamp());
        return roleMasterRepository.save(roleMaster);
    }
}
